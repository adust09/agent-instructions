# RUST からの内容

# Rust プロジェクト カスタムインストラクション

## 目次

- [基本原則](#基本原則)
- [コーディング規約](#コーディング規約)
- [プロジェクト構成](#プロジェクト構成)
- [エラー処理](#エラー処理)
- [テスト戦略](#テスト戦略)
- [パフォーマンス最適化](#パフォーマンス最適化)
- [依存関係管理](#依存関係管理)
- [ドキュメント](#ドキュメント)
- [セキュリティ考慮事項](#セキュリティ考慮事項)

## 基本原則

### 安全性と信頼性

- Rustの所有権システムとライフタイムを適切に活用し、メモリ安全性を確保する
- `unsafe`ブロックの使用は最小限に抑え、必要な場合は徹底的にドキュメント化する
- パニックを避け、適切なエラー処理を実装する

### パフォーマンスと効率性

- ゼロコスト抽象化を活用し、実行時オーバーヘッドを最小限に抑える
- 不必要なメモリ割り当てやコピーを避ける
- 適切な場合はジェネリクスとトレイトを使用して、型安全かつ効率的なコードを書く

### 保守性と可読性

- 明確で一貫性のある命名規則を使用する
- 複雑なロジックには適切なコメントを付ける
- 関数とモジュールの責任を明確に分離する

## コーディング規約

### 命名規則

- 変数、関数、メソッド: `snake_case`
- 型（構造体、列挙型、トレイト）: `PascalCase`
- 定数: `SCREAMING_SNAKE_CASE`
- マクロ: `snake_case!`
- モジュール: `snake_case`

### フォーマット

- `rustfmt`を使用して一貫したコードフォーマットを維持する
- デフォルトの設定を尊重し、プロジェクト固有のカスタマイズは最小限に抑える
- コミット前に必ず`cargo fmt`を実行する

### リンティング

- `clippy`を使用して一般的な問題やアンチパターンを検出する
- 警告は無視せず、適切に対処する

## プロジェクト構成

### ディレクトリ構造

```
my-rust-project/
├── Cargo.toml          # プロジェクト設定と依存関係
├── Cargo.lock          # 依存関係の正確なバージョン
├── src/                # ソースコード
│   ├── main.rs         # バイナリのエントリーポイント
│   ├── lib.rs          # ライブラリのルートモジュール
│   └── bin/            # 追加のバイナリ
├── tests/              # 統合テスト
├── benches/            # ベンチマーク
├── examples/           # 使用例
└── docs/               # ドキュメント
```

### モジュール構成

- 関連する機能を論理的なモジュールにグループ化する
- 公開APIは明示的に`pub`キーワードでマークし、必要最小限に抑える
- 内部実装の詳細は非公開に保つ

### ワークスペース

- 大規模プロジェクトではCargoワークスペースを使用して、複数のパッケージを管理する
- 共通の機能は再利用可能なクレートに分割する
- ワークスペースメンバー間の依存関係を明確に定義する

## エラー処理

### エラー型

- 意味のあるカスタムエラー型を定義する
- `thiserror`クレートを使用してエラー型の定義を簡素化する
- エラーメッセージは具体的で、問題の原因と可能な解決策を示す

### エラー伝播

- `?`演算子を使用してエラーを上位の呼び出し元に伝播する
- 必要に応じて`map_err`や`context`を使用してエラーに追加情報を付与する
- パニックではなく、`Result`型を返す関数を設計する

### 回復戦略

- エラーから回復可能な場合は、適切なフォールバックメカニズムを実装する
- クリティカルなエラーは明確に識別し、適切に処理する
- ユーザーに対しては、技術的な詳細ではなく、理解しやすいエラーメッセージを提供する

## テスト戦略

### ユニットテスト

- 各モジュールに対応するテストモジュールを作成する（`#[cfg(test)]`属性を使用）
- 公開APIと重要な内部関数の両方をテストする
- エッジケースとエラー条件を徹底的にテストする

### 統合テスト

- `tests/`ディレクトリに統合テストを配置する
- 実際のユースケースとワークフローをシミュレートする
- 外部依存関係との相互作用をテストする

### プロパティベーステスト

- `proptest`や`quickcheck`を使用して、プロパティベーステストを実装する
- 入力の広範囲な組み合わせに対してコードの動作を検証する
- 不変条件と事後条件を明確に定義する

### ドキュメントテスト

- ドキュメントコメント内のコード例が機能することを確認する
- 実際のユースケースを示す例を提供する
- `cargo test --doc`でドキュメントテストを実行する

## パフォーマンス最適化

### プロファイリング

- `criterion`を使用してベンチマークを作成し、パフォーマンスを測定する
- ホットパスを特定し、最適化の努力を集中させる
- 最適化の前後でベンチマークを実行し、改善を確認する

### メモリ効率

- 不必要なクローンやコピーを避ける
- 適切な場合は参照を使用する
- 大きなデータ構造には`Box`、`Rc`、`Arc`などのスマートポインタを使用する

### 並行処理

- 適切な場合は`rayon`を使用して並列処理を実装する
- スレッド安全性を確保するために、Rustの所有権システムを活用する
- 非同期処理には`tokio`や`async-std`などの成熟したランタイムを使用する

## 依存関係管理

### クレート選択

- **コミュニティで最も一般的なクレートの使用を優先する**
- クレートの選択基準：
  - メンテナンスの活発さ
  - ドキュメントの質
  - テストカバレッジ
  - 依存関係の数
  - ライセンスの互換性

### バージョニング

- セマンティックバージョニングを遵守する
- 依存関係のバージョンは適切に制約する（例：`^1.0.0`）
- 定期的に依存関係を更新し、セキュリティ脆弱性を回避する

### ベンダリング

- 必要に応じて`cargo vendor`を使用して、依存関係をベンダリングする
- オフラインビルドやエアギャップ環境での開発をサポートする
- ベンダリングされた依存関係の更新プロセスを確立する

## ドキュメント

### コードドキュメント

- すべての公開API要素に対して、ドキュメントコメント（`///`または`//!`）を提供する
- ドキュメントには以下を含める：
  - 機能の概要
  - パラメータと戻り値の説明
  - 使用例
  - エラー条件
  - パニック条件（該当する場合）

### READMEとガイド

- プロジェクトのREADMEには以下を含める：
  - プロジェクトの目的と機能
  - インストール手順
  - 基本的な使用例
  - ライセンス情報
- 複雑な機能には詳細なガイドを提供する

### ChangeLog

- セマンティックバージョニングに基づいて変更を記録する
- 各リリースの主要な変更、バグ修正、非互換性のある変更を文書化する
- 変更の理由と影響を説明する

## セキュリティ考慮事項

### 入力検証

- 外部からの入力は常に検証し、信頼しない
- パーサーには`nom`や`serde`などの十分にテストされたライブラリを使用する
- 入力サイズに制限を設け、DoS攻撃を防止する

### 機密データの処理

- 機密データを扱う際は`secrecy`や`zeroize`などのクレートを使用する
- メモリ内の機密データは使用後に確実に消去する
- 機密データをログに記録しない

### 依存関係のセキュリティ

- `cargo audit`を使用して、既知の脆弱性をチェックする
- CI/CDパイプラインにセキュリティスキャンを組み込む
- 依存関係を定期的に更新し、セキュリティパッチを適用する


---


# TS からの内容

## TypeScript
Reference : https://github.com/mizchi/ailab/blob/main/.cline/rules/typescript.md

TypeScriptでのコーディングにおける一般的なベストプラクティスをまとめます。

### 方針

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様化を可能な限り明記する
- 実装が内部状態を持たないとき、 class による実装を避けて関数を優先する
- 副作用を抽象するために、アダプタパターンで外部依存を抽象し、テストではインメモリなアダプタで処理する


### 型の使用方針

1. 具体的な型を使用
   - any の使用を避ける
   - unknown を使用してから型を絞り込む
   - Utility Types を活用する

2. 型エイリアスの命名
   - 意味のある名前をつける
   - 型の意図を明確にする
   ```ts
   // Good
   type UserId = string;
   type UserData = {
     id: UserId;
     createdAt: Date;
   };

   // Bad
   type Data = any;
   ```

### エラー処理

1. Result型の使用
   ```ts
   import { Result, ok, err } from "npm:neverthrow";

   type ApiError = 
     | { type: "network"; message: string }
     | { type: "notFound"; message: string }
     | { type: "unauthorized"; message: string };

   async function fetchUser(id: string): Promise<Result<User, ApiError>> {
     try {
       const response = await fetch(`/api/users/${id}`);
       if (!response.ok) {
         switch (response.status) {
           case 404:
             return err({ type: "notFound", message: "User not found" });
           case 401:
             return err({ type: "unauthorized", message: "Unauthorized" });
           default:
             return err({ type: "network", message: `HTTP error: ${response.status}` });
         }
       }
       return ok(await response.json());
     } catch (error) {
       return err({ type: "network", message: error instanceof Error ? error.message : "Unknown error" });
     }
   }
   ```

2. エラー型の定義
   - 具体的なケースを列挙
   - エラーメッセージを含める
   - 型の網羅性チェックを活用

### 実装パターン

1. 関数ベース（状態を持たない場合）
   ```ts
   // インターフェース
   interface Logger {
     log(message: string): void;
   }

   // 実装
   function createLogger(): Logger {
     return {
       log(message: string): void {
         console.log(`[${new Date().toISOString()}] ${message}`);
       }
     };
   }
   ```

2. classベース（状態を持つ場合）
   ```ts
   interface Cache<T> {
     get(key: string): T | undefined;
     set(key: string, value: T): void;
   }

   class TimeBasedCache<T> implements Cache<T> {
     private items = new Map<string, { value: T; expireAt: number; }>();
     
     constructor(private ttlMs: number) {}
     
     get(key: string): T | undefined {
       const item = this.items.get(key);
       if (!item || Date.now() > item.expireAt) {
         return undefined;
       }
       return item.value;
     }
     
     set(key: string, value: T): void {
       this.items.set(key, {
         value,
         expireAt: Date.now() + this.ttlMs
       });
     }
   }
   ```

3. Adapterパターン（外部依存の抽象化）
   ```ts
   // 抽象化
   type Fetcher = <T>(path: string) => Promise<Result<T, ApiError>>;

   // 実装
   function createFetcher(headers: Record<string, string>): Fetcher {
     return async <T>(path: string) => {
       try {
         const response = await fetch(path, { headers });
         if (!response.ok) {
           return err({ type: "network", message: `HTTP error: ${response.status}` });
         }
         return ok(await response.json());
       } catch (error) {
         return err({ type: "network", message: error instanceof Error ? error.message : "Unknown error" });
       }
     };
   }

   // 利用
   class ApiClient {
     constructor(
       private readonly getData: Fetcher,
       private readonly baseUrl: string
     ) {}

     async getUser(id: string): Promise<Result<User, ApiError>> {
       return await this.getData(`${this.baseUrl}/users/${id}`);
     }
   }
   ```

### 実装の選択基準

1. 関数を選ぶ場合
   - 単純な操作のみ
   - 内部状態が不要
   - 依存が少ない
   - テストが容易

2. classを選ぶ場合
   - 内部状態の管理が必要
   - 設定やリソースの保持が必要
   - メソッド間で状態を共有
   - ライフサイクル管理が必要

3. Adapterを選ぶ場合
   - 外部依存の抽象化
   - テスト時のモック化が必要
   - 実装の詳細を隠蔽したい
   - 差し替え可能性を確保したい

### 一般的なルール

1. 依存性の注入
   - 外部依存はコンストラクタで注入
   - テスト時にモックに置き換え可能に
   - グローバルな状態を避ける

2. インターフェースの設計
   - 必要最小限のメソッドを定義
   - 実装の詳細を含めない
   - プラットフォーム固有の型を避ける

3. テスト容易性
   - モックの実装を簡潔に
   - エッジケースのテストを含める
   - テストヘルパーを適切に分離

4. コードの分割
   - 単一責任の原則に従う
   - 適切な粒度でモジュール化
   - 循環参照を避ける


---