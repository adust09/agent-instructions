# NEXT.JS からの内容

# 技術スタック

## コア技術
- TypeScript: ^5.0.0
- Node.js: ^20.0.0
- Next.js: ^15.1.3
- React: ^19.0.0
- Tailwind CSS: ^3.4.17
- ESLint: ^9.0.0
- Prettier: ^8.0.0
- vitest: ^3.0.0

# API バージョン管理
## 重要な制約事項
- APIクライアントは `app/lib/api/client.ts` で一元管理
- AI モデルのバージョンは client.ts 内で厳密に管理
- これらのファイルは変更禁止（変更が必要な場合は承認が必要）：
  - client.ts  - AIモデルとAPI設定の中核
  - types.ts   - 型定義の一元管理
  - config.ts  - 環境設定の一元管理

## 実装規則
- AIモデルのバージョンは client.ts でのみ定義
- 型定義は必ず types.ts を参照
- 環境変数の利用は config.ts 経由のみ許可

---

# プロジェクト構成

以下のディレクトリ構造に従って実装を行ってください：

```
my-next-app/
├── app/
│   ├── api/                          # APIエンドポイント
│   │   └── [endpoint]/
│   │       └── route.ts
│   ├── components/                   # アプリケーションコンポーネント
│   │   ├── ui/                       # 基本UI（button, card等）
│   │   └── layout/                   # レイアウト関連
│   ├── hooks/                        # カスタムフック
│   ├── lib/                          # ユーティリティ
│   │   ├── api/                      # API関連処理
│   │   │   ├── client.ts             # 変更禁止: AIモデル設定
│   │   │   ├── types.ts              # 変更禁止: 型定義
│   │   │   └── config.ts             # 変更禁止: 環境設定
│   │   └── utils/                    # 共通関数
│   └── styles/                       # スタイル定義
```

### 配置ルール
- UIコンポーネント → `app/components/ui/`
- APIエンドポイント → `app/api/[endpoint]/route.ts`
- 共通処理 → `app/lib/utils/`
- API関連処理 → `app/lib/api/`

---

以上の内容を順守し、タスクを遂行してください。


---